题目描述
给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，
那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个：
 {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
还有一点需要注意的是：如果后面的数字都比前面的小，那么加入到队列中的数可能超过窗口大小，这时需要判断滑动窗口是否包含队头的这个元素，为了进行这个检查，我们可以在队列中存储数字在数组中的下标，
而不是数值，当一个数字的下标和当前出来的数字下标之差大于等于滑动窗口的大小时，这个元素就应该从队列中删除。
//方法一： 暴力查找，效率很低 O(N^2)
//方法二：使用双端队列。
class Solution {
public:
    /*使用双向队列，用来保存有可能是滑动窗口最大值的数组的下标。
        在存入一个数字的下标之前，首先要判断队列里已有数字是否小于待存入的数字。
        如果已有的数字小于待存入的数字，那么这些数字已经不可能是滑动窗口的最大值，
        因此需要在队列尾部删除（pop_back）。同时，如果队列头部的数字已经从窗口里滑出，
        那么滑出的数字也需要从队列的头部删除（pop_front）*/
    vector<int> maxInWindows(const vector<int>& num, unsigned int size)
    {
        vector<int> ret;
        if(num.size() == 0 || num.size() < size ||size < 1)
        {
            return ret;
        }
        
        deque<int> dq;
        for(int i = 0 ; i < size; i++)
        {
             while(!dq.empty() && num[i] > num[dq.back()])
             {
                 dq.pop_front();
             }
            dq.push_back(i);
        }
        for(int i = size; i<num.size(); i++)
        {
            ret.push_back(num[dq.front()]);
            while(!dq.empty() && num[i] > num[dq.back()])
            {
                dq.pop_back();
            }
             if(!dq.empty() && dq.front() <= (int)(i - size))
                dq.pop_front();
            dq.push_back(i);
        }
        ret.push_back(num[dq.front()]);
        return ret;
    }
};