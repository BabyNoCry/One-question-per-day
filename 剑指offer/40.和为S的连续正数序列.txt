题目描述
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!
输出描述:
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序


//方法一：//穷举法

//方法二：
/**
     * 思路：
     * 1、双指针技术，就是相当于有一个窗口，窗口的左右两边就是两个指针
     * 2、根据窗口内值之和来确定窗口的位置和宽度。
     */


//方法一实现：
/*
class Solution {
public:
    vector<vector<int> > FindContinuousSequence(int sum) {
      
        vector<vector<int>> ret;
         if(sum <= 1)
           return ret;
        vector<int> tmp;
        for(int i = 1;i<=sum/2+1 ;i++)
        {
             int cur = 0;
             int begin = i;
            int  end = 0;
           for(int j = i;j<=sum/2+1;j++)
           {
               cur += j;
               if(cur == sum)
               {
                   end = j;
                   for(int x = i; x <= j ;x++)
                   {
                       tmp.push_back(x);
                       
                   }
                   ret.push_back(tmp);
                   tmp.clear();
                   break;
               }
               else if(cur > sum)
                   break;
           }
        }
        
        return ret;
    }
};
*/

//方法二实现：
/**
     * 思路：
     * 1、双指针技术，就是相当于有一个窗口，窗口的左右两边就是两个指针
     * 2、根据窗口内值之和来确定窗口的位置和宽度。
     */

class Solution {
public:
    vector<vector<int> > FindContinuousSequence(int sum) {
       vector<vector<int>> ret;
        if(sum < 3)
           return  ret;
        int high = 2;
        int low = 1;
        while(high > low )
        {
            //计算两个窗口之间值得和
            int cur = (high + low) * (high - low +1) /2;
            //当前窗口内的值和为sum
            if(cur == sum)
            {
                vector<int> tmp;
                for(int i = low;i<= high ;i++)
                {
                    tmp.push_back(i);
                }
                ret.push_back(tmp);
                high++;  // 查找下一个序列，窗口任意一端++即可 ，因此这里low++ / high++
            }//当cur > sum 时，窗口向右缩小，即low ++；
            else if(cur > sum)
            {
                low ++;
            }
            else //当cur < sum 时，窗口向右增大，即high ++；
                high++;
        }
        return ret;
    }
};
