题目描述
给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],
其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。

思路
　　无法使用除法，正常连乘的话时间复杂度为O(n^2)，效率非常低。

　　考虑到计算每个B[i]时都会有重复，思考B[i]之间的联系，找出规律，提高效率。


　　如上图所示，可以发现：

　　　　B[i]的左半部分(红色部分)和B[i-1]有关（将B[i]的左半部分乘积看成C[i]，有C[i]=C[i-1]*A[i-1]），

　　　　B[i]的右半部分(紫色部分)与B[i+1]有关（将B[i]的右半部分乘积看成D[i]，有D[i]=D[i+1]*A[i+1]），

　　因此我们先从0到n-1遍历，计算每个B[i]的左半部分；  然后定义一个变量temp代表右半部分的乘积，从n-1到0遍历，
 令B[i]*=temp，而每次的temp与上次的temp关系即为temp*=A[i+1]。
class Solution {
public:
    vector<int> multiply(const vector<int>& A) {

        int numsLen = A.size();
        if(!numsLen)
            return {};
        vector<int> B (numsLen, 1);
        int productFront = 1;
        int productBack = 1;
        for(int i = 0;i<numsLen;i++){
            B[i] *= productFront;
            productFront *= A[i];
        }
        for(int i = numsLen-1;i>=0;i--){
            B[i] *= productBack;
            productBack *= A[i];
        }
        return B;
    }

};