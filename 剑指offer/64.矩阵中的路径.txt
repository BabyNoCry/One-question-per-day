题目描述
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，
每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。
 例如 a b c e s f c s a d e e 矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。

思路：利用回溯法求解。
首先，在矩阵中任选一个格子作为路径的起点。假设矩阵中某个格子的字符为ch并且这个格子对应于路径上的第i个字符。
如果路径上第i个字符不是ch，那么这个格子就不可能处在路径上的第i个位置。如果路径上的第i个字符正好是ch，就往相邻的格子寻找路径上第i+1个字符。
除了在矩阵边界上的格子之外，每个格子都有4个相邻的格子。重复这个过程直到路径上的所有字符都在矩阵中找到相应的位置。
当在矩阵中定位了路径上n个字符的位置后，在与第n个字符对应的格子周围都没有找到第n+1个字符，则只好在路径上回到第n-1个字符，
重新去寻找第n个字符由于路径不能重复进入格子，我们需要定义一个字符矩阵一样大小的布尔值矩阵，用来标记路径是否已经进入了相应格子。
、

class Solution {
public:
    bool _hasPath (char* matrix,int rows,int cols,int row,int col,bool* book,char* str,int& pathlen)
    {
        if(str[pathlen] == '\0')
            return true;
        bool haspath = false;
       if(col>=0 && col < cols && row >= 0 && row < rows && matrix[row*cols + col] == str[pathlen]&& !book[row*cols+ col])
       {
           ++pathlen;
           book[row*cols + col] = true;
           haspath = _hasPath(matrix,rows,cols,row + 1,col,book,str,pathlen)||
                       _hasPath(matrix,rows,cols,row-1,col,book,str,pathlen)||
                       _hasPath(matrix,rows,cols,row,col+1,book,str,pathlen)||
                       _hasPath(matrix,rows,cols,row,col-1,book,str,pathlen);
               if(!haspath)
               {
                   --pathlen;
                   book[row*cols + col] = false;
               }
       }
        return haspath;
    }
    bool hasPath(char* matrix, int rows, int cols, char* str)
    {
           if(matrix == NULL ||rows < 1 ||cols < 1 || str == NULL)
               return false;
            bool* book = new bool[rows* cols] ;     //标记走过的格子
         memset(book,0,rows*cols);
        int pathlen = 0;
        for(int row = 0; row<rows ;row++)
        {
            for(int col = 0; col< cols ;col++)
            {
                if(_hasPath(matrix,rows,cols,row,col,book,str,pathlen))
                    return true;
            }
        }
        
        delete[] book;
        return  false;
    }


};