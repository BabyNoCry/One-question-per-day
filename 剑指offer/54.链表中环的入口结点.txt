题目描述
给一个链表，若其中包含环，请找出该链表的环的入口结点，否则，输出null。

假设链表存在回环，如上图所示。设A为链表的起点，B为回环的起点。现在我们设定两个指针Fast（每次运动2个结点）和Slow（每次运动一个结点）。

首先我们先证明他们一定存在运动到同一点C的必然性。设AB的距离为m，BC的距离为n，环的长度为r。我们知道Fast走的长度为m+n+k1*r， Slow走的长度为m+n+k2*r，其中k1和k2为整数，又因为相同时间Fast走的距离是Slow的两倍，所以2*(m+n+k2*r)=m+n+k1*r。也就是说，m+n=(k1-2k2)*r。因为环的形状是给定的，所以m和r的值是固定的，我们必然可以找到一个n来满足上面的式子（k1和k2可以随意指定）。并且我们可以看出AC的长度m+n是环长度的整数倍。

证明了一定可以找到相遇的交点c以后，我们让Slow回到起点，保持运动速度不变。Fast留在C点，运动速度改为和Slow一样，每次运动1个结点。当Slow从A点到B的时候运动了m的长度，而此时Fast从C点向前运动（逆时针）继续运动了m，相当于从B点开始运动了m+n，正好是环的整数倍，也就是Slow和Fast相遇在了B点，正好是我们想要找的环的起点。

/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) :
        val(x), next(NULL) {
    }
};
*/
class Solution {
public:
    
    ListNode* EntryNodeOfLoop(ListNode* pHead)
    {
        if(pHead == nullptr)
            return NULL;
        ListNode* slow = pHead;
        ListNode* fast = pHead;
        while(fast && fast ->next)
        {
            slow = slow ->next;
            fast = fast->next->next;
            if(slow == fast)
            {
                fast = pHead;
                while(slow -fast)
                {
                    fast = fast->next;
                    slow = slow ->next;
                }
                return slow;
            }
        }
        
        return NULL;

    }
};
