题目描述
输入两个单调递增的链表，输出两个链表合成后的链表，
当然我们需要合成后的链表满足单调不减规则。
递归法：
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1 == NULL||pHead2 == NULL)
            return pHead1==NULL?pHead2:pHead1;
       ListNode* ret = NULL; 
        
       if(pHead1->val < pHead2->val)
       {
           ret = pHead1;
           pHead1->next = Merge(pHead1->next,pHead2);
       }
        else
        {
            ret = pHead2;
           pHead2->next = Merge(pHead1,pHead2->next);
        }
       
        return ret;
        
    }


};
迭代：
/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1 == NULL||pHead2 == NULL)
            return pHead1==NULL?pHead2:pHead1;
       ListNode* ret = NULL; 
        
       if(pHead1->val < pHead2->val)
       {
           ret = pHead1;
           pHead1 = pHead1->next;
       }
        else
        {
            ret = pHead2;
           pHead2 = pHead2->next;
        }
        ListNode* head = ret;
        while(pHead1&&pHead2)
        {
            if(pHead1->val < pHead2->val)
            {
               ret->next = pHead1;
               pHead1 = pHead1->next;
                 ret = ret->next ;
           }
            else
            {
                ret->next = pHead2;
               pHead2 = pHead2->next;
                ret = ret->next ;
            }
        }
        
        while(pHead1)
        {
            ret->next = pHead1;
            pHead1 = pHead1->next;
            ret = ret->next ;
        }
        while(pHead2)
        {
            ret->next = pHead2;
            pHead2 = pHead2->next;
            ret = ret->next ;
        }
        return head;
        
    }
};