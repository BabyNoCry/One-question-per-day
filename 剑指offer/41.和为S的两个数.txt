题目描述
输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。
输出描述:
对应每个测试案例，输出两个数，小的先输出

1.穷举法，时间复杂度较高，我们不考虑。
2. 双指针
思路：

数列满足递增，设两个头尾两个指针i和j，
?1、若ai + aj == sum，就是答案（相差越远乘积越小）
?2、若ai + aj > sum，aj肯定不是答案之一（前面已得出 i 前面的数已是不可能），j -= 1
?3、若ai + aj < sum，ai肯定不是答案之一（前面已得出 j 后面的数已是不可能），i += 1
 时间复杂度? O(n)

class Solution {
public:
    
    //这里用到一个数组结论：
    //当一个数组有序时，两个数字和相等时，这两个数字的差值越大，他们的乘积就越小。
    //当一个有序的序列，两个数相隔越远，最后得到的数最小。所以我们设定两个指针，分别从序列的两头出发。
    vector<int> FindNumbersWithSum(vector<int> array,int sum) {
        vector<int> ret;
        if(array.size() < 2)
            return ret;
        int begin = 0;
        int end = array.size() -1;
        while(begin < end)
        {
            int tmp = array[begin]  + array[end];
            if(tmp == sum)
            {
                ret.push_back(array[begin]);
                ret.push_back(array[end]);
                break;
            }
            else if(tmp > sum)
            {
                end--;
            }
            else
            {
                begin++;
            }
        }
        return ret;
    }
};