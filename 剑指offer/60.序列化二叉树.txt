题目描述
请实现两个函数，分别用来序列化和反序列化二叉树

二叉树的序列化是指：把一棵二叉树按照某种遍历方式的结果以某种格式保存为字符串，从而使得内存中建立起来的二叉树可以持久保存。序列化可以基于先序、中序、后序、层序的二叉树遍历方式来进行修改，序列化的结果是一个字符串，序列化时通过 某种符号表示空节点（#），以 ！ 表示一个结点值的结束（value!）。

二叉树的反序列化是指：根据某种遍历顺序得到的序列化字符串结果str，重构二叉树。
/*
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) :
            val(x), left(NULL), right(NULL) {
    }
};
*/
class Solution {
public:
    vector<int> buf;
    void _Serialize(TreeNode *root) { //前序遍历   
        if(root == NULL)
        {
            buf.push_back(0xFFFFFFFF);
            return;
        }
        buf.push_back(root->val);
        _Serialize(root->left);
        _Serialize(root->right);
    }
    char* Serialize(TreeNode *root) { //前序遍历   
        buf.clear();
        _Serialize(root);
        size_t size = buf.size();
        int* arr = new int[size];
        for(size_t i = 0;i<size ;i++)
        {
         arr[i] = buf[i];   
        }
        return (char*) arr;//强制类型转换
    }
    
    TreeNode* _Deserialize(int*& p)
    {
        if(*p == 0xFFFFFFFF)
        {
            p++;
            return nullptr;
        }
        TreeNode* root = new TreeNode(*p);
        p++;
        root->left = _Deserialize(p);    //递归构造左子树并连接到根节点的左孩子。
        root->right = _Deserialize(p);    //递归构造右子树并连接到根节点的右孩子。
        return root;
    }
    TreeNode* Deserialize(char *str) {
        int* p = (int*) str;     //强制类型转换
        return _Deserialize(p);
    }
};