给定两个单词 word1 和 word2，找到最小的修改步数，把word1转换成word2
每一步操作记为一步，允许在一个word上进行3种如下操作：
1： 插入一个字符
2：删除一个字符
3：替换一个字符

状态F(i) : 把word1的前i个字符转换成word2的最小修改次数
F(i) : F(i-1) + 1	//这种状态只能用到删除 ，不行。。。


正确状态定义：
状态F(i,j)：把word1的前i个字符转换为word2的前j个字符最小修改次数
word1: hello 
word2: world
 i  =2 ,j = 4;
F(2,4): he --> worl --> worl + llo
F(1,4): h--> worl --> worl + ello F(1,4) +1 :删除e--->F(2,4)
F(2,3) : he -->wor --> wor + llo F(2,3）+ 1:插入l --->F(2,4)
F(1,3): h --> wor --> wor +ello F(1,3) +1 ：替换e-->l -->F(2,4)

特殊情况：
F(2,3): he --> wor --> wor + llo F(2,3) + 0 : 无需替换操作 (word1 [3] == word2[4])  --> F(3,4)

F(3,4):  hel  -->word  worl +lo 



详细分析过程：

word1 ： hello    Word2： world
F(1,1) : hello  -->替换 --> wello 
F(1，2)：F(1,1) ： wello ： 1
              F(0,2) : wohello -->插入o --》 woello 
              F(0,1): whello  ---> 替换h --> woello 
	:2 
F(1,3) : F(1,2) : woello -->插入r --> worello 
           F(0,3): woehello -->删除h --> worello
           F(0,2) : wohello -->替换h --> worello
	: 3

转移方程：
F(i,j) : min(F(i,j-1)+1 (插入),F(i-1,j) + 1 (删除)，F(i-1,j-1) + (word1[i] == word2[j]）？ 0:1） （替换））

初始化：F(0，j)   =   j  (插入) ： 空串到 ---> word2(j) 
            F(i,0) = i(删除：word1(i) -->空串) 
返回：
F(word1.size(),word2.size()) 

题目叙述：
给定两个单词word1和word2，请计算将word1转换为word2至少需要多少步操作。
你可以对一个单词执行以下3种操作：
a）在单词中插入一个字符
b）删除单词中的一个字符
c）替换单词中的一个字符

class Solution {
public:
    int minDistance(string word1, string word2) {
        int w1len = word1.size();
        int w2len = word2.size();
        if(w1len == 0 || w2len == 0)
            return max(w1len,w2len);
        
        vector<vector<int>> minDis(w1len+1,vector<int>(w2len+1,0));
        //F(0,j) == j
        for(int i = 0;i<= w2len;i++)
            minDis[0][i] = i;
        
        //F(i,0) == i;
        for(int i = 0;i<= w1len;i++)
            minDis[i][0] = i;
        for(int i =1;i<=w1len;i++)
        {
            for(int j = 1;j<=w2len;j++)
            {
                //插入，删除
                minDis[i][j] = 1+ min(minDis[i][j-1],minDis[i-1][j]);
                //替换
                if(word1[i-1] == word2[j-1])
                    minDis[i][j] = min(minDis[i][j],minDis[i-1][j-1]);
                else
                    minDis[i][j] = min(minDis[i][j],1+ minDis[i-1][j-1]);
            }
        }
        return minDis[w1len][w2len];
    }
};

