有一种将字母编码成数字的方式：'a'->1, 'b->2', ... , 'z->26'。

现在给一串数字，给出有多少种可能的译码结果。
输入描述:
编码后数字串


输出描述:
可能的译码结果数
示例1
输入
12
输出
2

F(i) : 前i个字符的可能的译码结果
C++ 动态规划方法
主要有四种情况

1.当前字符与前一位可以组成10或20
2.当前字符与前一位可以组成11到26之间（不含20）
3.当前字符和前一位可以组成30,40,...,90
4.其它
str
F(i):   当str[i] = '0' 时，'0' < str[i-1] <= '2' 时，F(i) = F(i-2); 
        当str[i -1 ] = '1' 时，或者str[i-1] == '2'，且str[i] <='6'  时，F(i) = F(i-2) + F(i-1); 
        当str[i] == '0' 时，F(i)  = 0;
        其他情况 F(i) = F[i-1];\


代码如下：

#include<iostream>
#include<vector>
using namespace std;
int nums(string& str)
{
    size_t len = str.size();
     if(len == 0|| str[0] == '0')
        return 0;
    vector<int>  ret(len,0);
    ret[0] = 1;
    //第i个字符的解码方式的计算，可能会用到前面两个字符的值，因此这里需要将第一个和第二个字符的解码方式进行初始化
    if('0'<str[0]&&str[0]<='2'&&str[1] == '0')
    {
        ret[1] = 1;
    }
    else if(str[0] == '1' || (str[0] == '2'&& str[1] <='6'))
    {
        ret[1] = 2;
    }
    else if(str[1] == '0')
    {
        ret[1] = 0;
    }
    else
    {
        ret[1] = 1;
    }
    
    for(int i = 2;i<len;i++)
    {
        if('0'<str[i-1]&&str[i-1]<='2' && str[i] == '0')
        {
            ret[i] = ret[i-2];
        }
        else if(str[i-1] == '1'||(str[i-1] == '2'&&str[i] <= '6'))
        {
            ret[i] = ret[i-2] + ret[i-1];
        }
        else if(str[i] == '0')
        {
            ret[i] = 0;
        }
        else
        {
            ret[i] = ret[i-1];
        }
    }
   return ret[len-1];
 
}
int main()
{
    string str;
    cin>>str;
   cout<<nums(str)<<endl;
    return 0;
   
}