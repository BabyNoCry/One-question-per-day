Fibonacci数列是这样定义的：
F[0] = 0
F[1] = 1
for each i ≥ 2: F[i] = F[i-1] + F[i-2]
因此，Fibonacci数列就形如：0, 1, 1, 2, 3, 5, 8, 13, ...，在Fibonacci数列中的数我们称为Fibonacci数。给你一个N，你想让其变为一个Fibonacci数，每一步你可以把当前数字X变为X-1或者X+1，现在给你一个数N求最少需要多少步可以变为Fibonacci数。
输入描述:
输入为一个正整数N(1 ≤ N ≤ 1,000,000)
输出描述:
输出一个最小的步数变为Fibonacci数"
示例1
输入
复制
15
输出
复制
2

找到N两变的数，比较差值即可。
代码：
#include<iostream>
#include<vector>
#include<cmath>
using namespace std;
int main()
{
    size_t N;
    cin>>N;
    if(N == 0 || N == 1)
        cout<<0;
    else
    {
        size_t count = -1 ;
        int sum1 = 1;
        int sum2 = 1;
       
        while(1)
        {
            if(sum2 < N)
            {
                count = N - sum2;
            
            }
            else
            {
                break;
            }
            int tmp = sum1;
            sum1 =  sum2;
            sum2 = sum2 + tmp;
        }
         
        cout<<min(count,sum2-N)<<endl;
    }
    
    return 0;
}