由于业绩优秀，公司给小Q放了 n 天的假，身为工作狂的小Q打算在在假期中工作、锻炼或者休息。他有个奇怪的习惯：
不会连续两天工作或锻炼。只有当公司营业时，小Q才能去工作，只有当健身房营业时，小Q才能去健身，小Q一天只能干一件事。
给出假期中公司，健身房的营业情况，求小Q最少需要休息几天。

输入描述:
第一行一个整数  表示放假天数
第二行 n 个数 每个数为0或1,第 i 个数表示公司在第 i 天是否营业
第三行 n 个数 每个数为0或1,第 i 个数表示健身房在第 i 天是否营业
（1为营业 0为不营业）

输出描述:
一个整数，表示小Q休息的最少天数
#include <iostream>

#include <vector>

#include <algorithm>

using namespace std;

 /*
 用到动态规划，将大问题变成小问题递推解决，因为第二天只能做昨天没做过的事，每一天的某件事的递推数字都得是昨天其它两件事的最大值+1去递推，
 最终得到的最后三件事的最大值则是不休息做事的天数的最大值，用总天数减去做事日则是休息日
 */

int main(){

    int n;

    cin >> n;

    vector<int> work(n), slg(n);

    for(int i=0; i<n; ++i)

        cin >> work[i];

    for(int i=0; i<n; ++i)

        cin >> slg[i];

    vector<vector<int>> dp(3, vector<int>(n+1));

     dp[0][0] = dp[1][0]=dp[2][0]=0;

    for(int i=1; i<=n; ++i){

        dp[0][i] = max(dp[0][i-1],max(dp[1][i-1],dp[2][i-1]));

        if(slg[i-1]){

            dp[1][i] = max(dp[0][i-1], dp[2][i-1])+1;

        }

        if(work[i-1]){

            dp[2][i] = max(dp[1][i-1], dp[0][i-1])+1;

        }

    }

    cout << n - max(dp[0][n],max(dp[1][n],dp[2][n])) << endl;

 

    return 0;

}
