被包围的区域
给定一个二维的矩阵，包含?'X'?和?'O'（字母 O）。

找到所有被 'X' 围绕的区域，并将这些区域里所有的?'O' 用 'X' 填充。

示例:

X X X X
X O O X
X X O X
X O X X
运行你的函数后，矩阵变为：

X X X X
X X X X
X X X X
X O X X
解释:

被围绕的区间不会存在于边界上，换句话说，任何边界上的?'O'?都不会被填充为?'X'。 任何不在边界上，或不与边界上的?'O'?相连的?'O'?最终都会被填充为?'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。
思路：
遍历矩阵的四条边，如果是‘O’,就将其变为另外的字符‘*’，然后递归遍历它的上下左右的结点，继续进行。
最后剩下的‘O’，就是被包围额区域。只需要再次遍历矩阵，将‘*’改为原来的‘O’（没有被包围的部分），将‘O’部分变为‘X’，被包围的部分。

代码如下：
class Solution {
public:
    int nextop[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
    void DFS(int x,int y ,int row,int col,vector<vector<char>>& board)
    {
       
        board[x][y] = '*';
        for(int i = 0;i<4;i++)
        {
        
            int nx = x+nextop[i][0];
            int ny = y+nextop[i][1];
            if(nx >=0 &&nx<row && ny>=0 && ny<col )
            {
                if( board[nx][ny] == 'O')
                {
                    DFS(nx,ny,row,col,board);
                }
            }
        }

    }
    void solve(vector<vector<char>>& board) {
            if(board.size() == 0)
            return;
            int row = board.size();
            int col = board[0].size();
            for(int i = 0;i<row;i++)
            {
                if(board[i][0] == 'O')
                DFS(i,0,row,col,board);
                if(board[i][col-1] == 'O')
                DFS(i,col-1,row,col,board);
            }
            for(int i = 0;i<col;i++)
            {
                if(board[0][i] == 'O')
                DFS(0,i,row,col,board);
                if(board[row-1][i] == 'O')
                DFS(row-1,i,row,col,board);
            }

            for(int i = 0;i<row;i++)
            {

                for(int j =0;j<col;j++)
                {
                    if(board[i][j] == '*')
                    board[i][j] = 'O';
                    else if(board[i][j] == 'O')
                    {
                            board[i][j] = 'X';
                    }
                }
            }
            
    }
};