BFS： 第一次找到的路径最短  ，第一次可以搜索到。
DFS:   第一次不一定可以搜索到
例子：
假设有一个迷宫，里面有障碍物，迷宫用二维矩阵表示，标记为0的地方表示可以通过，标记为1的地方表示障碍物，
不能通过。现在给一个迷宫出口，让你判断是否可以从入口进来之后，走出迷宫，每次可以向任意方向走。
bool BFS(vector<vector<int>>&gird,int sex,）


你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为? '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。


class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        //用哈希表效率更快
        unordered_set<string> dead(deadends.begin(),deadends.end());
        if(dead.find("0000")!= dead.end())
        return -1;

        unordered_set<string> book;
        book.insert("0000");
        //初始化队列
        queue<string> q;
        q.push("0000");
        int step = 0;
        while(q.empty())
        {
            int n = q.size();
            for(int i = 0; i<n;i++)
            {
                string curstr = q.front();
                q.pop();
                if(curstr == target)
                return step;

                //四位密码锁，每个位置每次都可以转一次
                for(int j = 0;j<4;j++)
                {
                    string newstr1 = curstr;
                    string newstr2 = curstr;// 哈希表的查找更快
        unordered_set<string> deadendsSet(deadends.begin(), deadends.end());
        //如果"0000"在死亡字符串中，则永远到达不了
        if(deadendsSet.find("0000") != deadendsSet.end())
            return -1;
 //初始化队列
 queue<string> que;
 que.push("0000");
 //加标记，已经搜索过的字符串不需要再次搜索
 unordered_set<string> book;
 book.insert("0000");
 int step = 0;
 while (!que.empty()) {
 int n = que.size();
 //从上一步转换之后的字符串都需要进行验证和转换
 //并且只算做一次转换，类似于层序遍历，转换的步数和层相同
 for (int i = 0; i < n; i++) {
 string curStr = que.front();
 que.pop();
 if (curStr == target) return step;
 //四位密码锁，每个位置每次都可以转一次
 for (int j = 0; j < 4; j++) {
 string newStr1 = curStr, newStr2 = curStr;
 //当前位置可以向前或者向后拨一位
 newStr1[j] = newStr1[j] == '9' ? '0' : newStr1[j] + 1;
 newStr2[j] = newStr2[j] == '0' ? '9' : newStr2[j] - 1;
 if (deadendsSet.find(newStr1) == deadendsSet.end()
                        && book.find(newStr1) == book.end()) {
 que.push(newStr1);
 book.insert(newStr1);
 }
 if (deadendsSet.find(newStr2) == deadendsSet.end()
                        && book.find(newStr2) == book.end()) {
 que.push(newStr2);
 book.insert(newStr2);
 }
 }
 }
 step++;
 }
 return -1;
 }
 };
