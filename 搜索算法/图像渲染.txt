有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。

给你一个坐标?(sr, sc)?表示图像渲染开始的像素值（行 ，列）和一个新的颜色值?newColor，让你重新上色这幅图像。

为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。

最后返回经过上色渲染后的图像。

示例 1:

输入: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
输出: [[2,2,2],[2,2,0],[2,0,1]]
解析: 
在图像的正中间，(坐标(sr,sc)=(1,1)),
在路径上所有符合条件的像素点的颜色都被更改成2。
注意，右下角的像素没有更改为2，
因为它不是在上下左右四个方向上与初始点相连的像素点。
注意:

image 和?image[0]?的长度在范围?[1, 50] 内。
给出的初始点将满足?0 <= sr < image.length 和?0 <= sc < image[0].length。
image[i][j] 和?newColor?表示的颜色值在范围?[0, 65535]内。

分析：
1.（x,y）染色 
2. 以（x,y）为中心搜索新的符合要求的位置。


代码：
class Solution {
public:

    void DFS(vector<vector<int>>& image,int x, int y,int newColor,int originalColor)
    {
        static int pos[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
        int row = image.size();
        int col = image[0].size();
        //1.染上色
        image[x][y] = newColor;
        //2.搜索，上下左右
        for(int i = 0;i<4;i++)
        {
            int nx = x + pos[i][0];
            int ny = y+ pos[i][1];
            //判断位置是否越界 
            if(nx>= row || nx<0 || ny>= col || ny<0)
                continue;
            //判断新颜色是否与原来的颜色相同，相同则不需要进行，直接退出。
            if(newColor == originalColor)
                return ;
            if(image[nx][ny]==originalColor )
            {
                DFS(image,nx,ny,newColor,originalColor);
            }
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        
        if(image.empty())
        return image;
        int originalColor = image[sr][sc];
        DFS(image,sr,sc,newColor,originalColor);
        return image;
    }
};
