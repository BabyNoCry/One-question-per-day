定义一个二维数组N*M（其中2<=N<=10;2<=M<=10），如5 × 5数组下所示： 


int maze[5][5] = {


        0, 1, 0, 0, 0,


        0, 1, 0, 1, 0,


        0, 0, 0, 0, 0,


        0, 1, 1, 1, 0,


        0, 0, 0, 1, 0,


};


它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。入口点为[0,0],既第一空格是可以走的路。

Input

一个N × M的二维数组，表示一个迷宫。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。

Output

左上角到右下角的最短路径，格式如样例所示。

Sample Input

0 1 0 0 0

0 1 0 1 0

0 0 0 0 0

0 1 1 1 0

0 0 0 1 0

Sample Output

(0, 0)

(1, 0)

(2, 0)

(2, 1)

(2, 2)

(2, 3)

(2, 4)

(3, 4)

(4, 4)
 

 

 

输入描述:
输入两个整数，分别表示二位数组的行数，列数。再输入相应的数组，其中的1表示墙壁，0表示可以走的路。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。

输出描述:
左上角到右下角的最短路径，格式如样例所示。

示例1
输入
复制
5 5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
输出
复制
(0,0)
(1,0)
(2,0)
(2,1)
(2,2)
(2,3)
(2,4)
(3,4)
(4,4)

注意题目：可以向任意方向移动
回溯法：
本题可用回溯法求解 具体步骤为：
1. 首先将当前点加入路径，并设置为已走
2. 判断当前点是否为出口，是则输出路径，保存结果；跳转到4
3. 依次判断当前点的上、下、左、右四个点是否可走，如果可走则递归走该点
4. 当前点推出路径，设置为可走

#include<vector>
#include<iostream>
using namespace std;
vector<vector<int> > best_path;
vector<vector<int> > cur_path;
vector<vector<int> > MG;
int N,M;
void Slove(int i , int j)
{
    MG[i][j] = 1;    //表示已经走过
    cur_path.push_back({i,j});
    
    if(i == N-1 && j == M-1)
    {
        if(best_path.empty()||cur_path.size()<best_path.size())
        {
            best_path = cur_path;
        }
    }
    
    if(i-1 >= 0 && MG[i-1][j] == 0)
       Slove(i-1,j);
    if(j-1 >= 0 && MG[i][j-1] == 0)
       Slove(i,j-1);
    if( i+1 < N && MG[i+1][j] == 0)
       Slove(i+1,j);
    if(j+1 < M && MG[i][j+1] == 0)
       Slove(i,j+1);
    
    MG[i][j]  = 0;    //恢复现场设置为未走
    cur_path.pop_back();
}
int main()
{

    while(cin>>N>>M)
    {
       
         MG = vector<vector<int> > (N,vector<int>(M,0));
        best_path.clear();
        cur_path.clear();
        for(int i = 0;i<N; i++)
        {
            for(int j = 0;j<M;j++)
            {
                cin>>MG[i][j];    
            }
        }
        Slove(0,0);
       for(auto i : best_path)
       {
           cout<<"("<<i[0]<<","<<i[1]<<")"<<endl;
       }

    }
            return 0;
}